package main

import (
	"flag"
	"fmt"
	"log"
	"os"

	"github.com/vulncheck-oss/go-exploit/db"
)

type InputType string

const (
	ShodanGZIP InputType = "shodan-gzip"
	PCAP       InputType = "pcap"
)

func (i *InputType) Set(value string) error {
	switch value {
	case string(ShodanGZIP), string(PCAP):
		*i = InputType(value)
		return nil
	default:
		return fmt.Errorf("Invalid processo: %s", value)
	}
}

func (i *InputType) String() string {
	return string(*i)
}

func validateArguments(processor InputType, inputFile string, outputFile string) bool {
	if len(processor.String()) == 0 {
		fmt.Println("Please provide a -type argument")

		return false
	}
	if len(outputFile) == 0 {
		fmt.Println("Please provide an -out argument")

		return false
	}
	if len(inputFile) == 0 {
		fmt.Println("Please provide an -in argument")

		return false
	}

	_, err := os.Stat(inputFile)
	if os.IsNotExist(err) {
		log.Println("The provided -in file doesn't exist")

		return false
	}

	return true
}

func main() {
	var processor InputType
	var inputFile string
	var dbName string
	flag.Var(&processor, "type", "Choose an input type: shodan-gzip or pcap")
	flag.StringVar(&inputFile, "in", "", "The data to produce the go-exploit db cache from")
	flag.StringVar(&dbName, "out", "", "The name of the SQLite3 DB to create")
	flag.Parse()

	if !validateArguments(processor, inputFile, dbName) {
		return
	}

	// initialize the DB
	db.GlobalHTTPRespCacheLimit = 1000000
	if !db.InitializeDB(dbName) {
		return
	}

	switch processor {
	case ShodanGZIP:
		DoShodanGZIP(inputFile)
	case PCAP:
		DoPCAP(inputFile)
	}
}
